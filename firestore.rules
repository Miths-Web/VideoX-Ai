rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUser() {
      return request.resource.data.keys().hasAll(['uid', 'email', 'displayName', 'createdAt']) &&
             request.resource.data.uid == request.auth.uid &&
             request.resource.data.email == request.auth.token.email;
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                   userId == request.auth.uid && 
                   isValidUser();
      allow update: if isAuthenticated() && 
                   userId == request.auth.uid;
      allow delete: if false; // Prevent user deletion through client
      
      // User videos subcollection
      match /videos/{videoId} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId);
      }
    }
    
    // Videos collection
    match /videos/{videoId} {
      allow read: if isAuthenticated() && 
                 resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
    }
    
    // Settings collection
    match /settings/{settingId} {
      allow read: if isAuthenticated() && 
                 resource.data.userId == request.auth.uid;
      allow write: if isAuthenticated() && 
                  request.resource.data.userId == request.auth.uid;
    }
  }
}